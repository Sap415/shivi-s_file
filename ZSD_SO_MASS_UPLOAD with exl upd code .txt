*&---------------------------------------------------------------------*
*& Include          ZDATA_DECLARATION
*&---------------------------------------------------------------------*

DATA : ls_head              TYPE bapisdhd1,
       lt_item              TYPE STANDARD TABLE OF  bapisditm,
       ls_item              TYPE   bapisditm,
       lt_return1           TYPE STANDARD TABLE OF bapiret2,
       lt_partner           TYPE STANDARD TABLE OF bapiparnr,
       ls_partner           TYPE bapiparnr,
       order_header_inx     LIKE bapisdhd1x OCCURS 0 WITH HEADER LINE,
       order_items_inx      LIKE bapisditmx OCCURS 0 WITH HEADER LINE,
       salesdocument        TYPE bapivbeln-vbeln,
       lt_fcat              TYPE slis_t_fieldcat_alv,
       ls_layo              TYPE slis_layout_alv,
       order_schedules_in   LIKE  bapischdl OCCURS 0 WITH HEADER LINE,
       order_schedules_inx  LIKE  bapischdlx OCCURS 0 WITH HEADER LINE,
       order_conditions_in  LIKE  bapicond OCCURS 0 WITH HEADER LINE,
       order_conditions_inx LIKE  bapicondx OCCURS 0 WITH HEADER LINE,
       it_fcat              TYPE slis_t_fieldcat_alv,
       wa_fcat              TYPE slis_fieldcat_alv,
       wa_layo              TYPE slis_layout_alv,
       lv_shipto            TYPE kunnr,
       lv_soldto            TYPE kunnr,
       len                  TYPE string,
       len1                 TYPE string,
       len2                 TYPE string,
       len3                 TYPE string,
       it_truxs             TYPE truxs_t_text_data,
       col                  TYPE i VALUE 1,
       ucomm                TYPE sy-ucomm,
       adh_len              TYPE string,
       lv_filename          TYPE string,
       lv_path              TYPE string,
       lv_fullpath          TYPE string,
       lv_result            TYPE i,
       lv_default           TYPE string,
       lv_fname             TYPE string,
       it_smesg             TYPE tsmesg,
       wa_smesg             LIKE LINE OF it_smesg,
       id_smesg_zeile       TYPE smesg-zeile,
       it_return            TYPE bapiret2_t,
       id_send_if_one       TYPE boole_d.

TYPES : BEGIN OF ty_output,
          message TYPE string,
          status  TYPE string,
          so_num  TYPE string,
          col     TYPE i,
        END OF ty_output.

DATA : Lt_output TYPE TABLE OF ty_output,    ""for output display
       LS_output TYPE ty_output,
       lv_auart  TYPE vbak-auart,
       lv_auart1 TYPE vbak-auart.

DATA: tmp_file TYPE string.
DATA: tmp_file2 TYPE vbak-bname.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
TYPES : BEGIN OF ty_upd_fom,
          ordertyp   TYPE string,        ""order type
          uni_key    TYPE string,       ""unique key
          sorg       TYPE string,       ""sales org
          distchanl  TYPE string,       ""distribution chanl
          division   TYPE string,       ""division
          soldto     TYPE string,       ""sold to party
          sold_name  TYPE string,       ""sold to party name
          shipto     TYPE string,       ""ship to party
          ship_name  TYPE string,       ""ship to party name
          street     TYPE string,       ""street
          pst_cd     TYPE string,       ""postl code
          city       TYPE string,       ""city
          country    TYPE string,       ""country
          region     TYPE string,       ""region
          adh_no     TYPE string,       ""addhar no
          pan_no     TYPE string,       ""pan no
          mob_no     TYPE string,       ""mobile no
          line_itm   TYPE string,       ""line itm
          material   TYPE string,       ""material
          quantity   TYPE string,       ""quantity
          uom        TYPE string,       ""uom
*          dscunt     TYPE string,       ""Discount
          dscunt_amt TYPE KBETR,"string,       ""Discount_amt
*          FREIGHT TYPE string,       ""FREIGHT
          FREIGHT_amt TYPE string,       ""FREIGHT_amt
        END OF ty_upd_fom.

DATA: it_upd_fom TYPE TABLE OF ty_upd_fom,
      ls         TYPE          ty_upd_fom.

TYPES : BEGIN OF ty_upd_lfo,
          ordertyp   TYPE string,      "Order type
          uni_key    TYPE string,     "unique_key
          sorg       TYPE string,     "Sales organization
          distchanl  TYPE string,     "Distribution channel
          division   TYPE string,     "Division
          soldto     TYPE string,     "Customer – Sold to party
          shipto     TYPE string,     "Customer – Ship to party
          adh_no     TYPE string,     "Addhar no.
          line_itm   TYPE string,     "line itm
          material   TYPE string,     "Material
          quantity   TYPE string,     "Quantity
          uom        TYPE string,     "Unit of Measure
*          dscunt     TYPE string,    ""Discount
*          dscunt_amt TYPE string, ""Discount_amt
*          FREIGHT TYPE string,       ""FREIGHT
*          FREIGHT_amt TYPE string,       ""FREIGHT_amt
        END OF ty_upd_lfo.

DATA: it_upd_lfo TYPE TABLE OF ty_upd_lfo,
      ls1        TYPE          ty_upd_lfo.

DATA: BEGIN OF ls_header,
        name TYPE c LENGTH 255,
      END OF ls_header.
DATA: header LIKE TABLE OF ls_header.

"for excel functionality
DATA : lr_excel_structure      TYPE REF TO data,
       lo_source_table_descr   TYPE REF TO cl_abap_tabledescr,
       lo_table_row_descriptor TYPE REF TO cl_abap_structdescr,
       lv_content              TYPE xstring,
       lt_binary_tab           TYPE TABLE OF sdokcntasc,
       lv_length               TYPE i,
       lv_filename1            TYPE string,
       lt_bin                  TYPE STANDARD TABLE OF solix,
       lv_size                 TYPE i.








*&---------------------------------------------------------------------*
*& Report ZSD_SO_MASS_UPLOAD
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zsd_so_mass_upd.
TABLES:sscrfields.
TYPE-POOLS:truxs.

INCLUDE zdata_declaration.

""""""""""""""""""""""""""Selection screen for file selection"""""""""""""""

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-113.
  PARAMETERS : p_file TYPE rlgrap-filename.
SELECTION-SCREEN END OF BLOCK b1.

***""""""""""""""""""""""""Selection screen for download file""""""""""""""""
***
****SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE TEXT-112.
****  SELECTION-SCREEN PUSHBUTTON /1(35) p_but1 USER-COMMAND but1.
****  SELECTION-SCREEN PUSHBUTTON /1(35) p_but2 USER-COMMAND but2.
****SELECTION-SCREEN END OF BLOCK b2.
****
****""""""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""""""""""
****
****""""""""""""""""""""""""according to customer excel file download""""""""""
****
****INITIALIZATION.
****  p_but1 = text-115."""button for LFO file format (regular customer)
****  p_but2 = text-116."""button FOM file format (one time customer)
****
****AT SELECTION-SCREEN.
****  IF  sscrfields-ucomm EQ 'BUT1' OR
****      sscrfields-ucomm EQ 'BUT2'.
****    ucomm = sscrfields-ucomm.
****  ENDIF.
****
****  CASE ucomm.
****    WHEN 'BUT1'.
****      PERFORM dwn_excl_regular_cust.
****    WHEN 'BUT2'.
****      PERFORM dwn_excl_one_time_cust.
****  ENDCASE.
"""""""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""""""""

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = ' '
    IMPORTING
      file_name     = p_file.

START-OF-SELECTION.

  """"""""""""""""""""""""""FILE TYPE CHECK(.xls or .xlsx)"""""""""""""""""""""""""""""""""""
  IF p_file IS NOT INITIAL.
    DATA: ext TYPE char5.
    CALL FUNCTION 'TRINT_FILE_GET_EXTENSION'
      EXPORTING
        filename  = p_file
*       UPPERCASE = 'X'
      IMPORTING
        extension = ext.

    IF ( ext EQ 'XLS' OR ext EQ 'XLSX' ).
      CLEAR: ext.
    ELSE.
      CLEAR ext.
      MESSAGE TEXT-101 TYPE 'I' DISPLAY LIKE 'E' .
      CLEAR: p_file.
      LEAVE LIST-PROCESSING.
    ENDIF.
  ELSE.
    MESSAGE TEXT-114 TYPE 'I' DISPLAY LIKE 'E' .
    LEAVE LIST-PROCESSING.
  ENDIF.
  """""""""""""""""""""""File name check""""""""""""""""""""""""""""""

  TYPES : BEGIN OF t_itab,
            record LIKE p_file,
          END OF t_itab.

  DATA: itab    TYPE TABLE OF t_itab WITH HEADER LINE,
        v_lines TYPE i.

  tmp_file = p_file.

  SPLIT tmp_file AT '\' INTO TABLE itab.
  DESCRIBE TABLE itab LINES v_lines.
  READ TABLE itab INDEX v_lines.
  tmp_file2 = itab-record.

  SELECT SINGLE vbeln, bname, auart, vkorg FROM vbak INTO @DATA(tmp_fname)
  WHERE bname = @tmp_file2.

  IF sy-subrc = 0.
    MESSAGE TEXT-100 TYPE 'I' DISPLAY LIKE 'E' .
    LEAVE LIST-PROCESSING.
  ENDIF.

  """""""""""""""""""end"""""""""""""""""""""""""""""""""""""""""""""

  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
*     I_FIELD_SEPERATOR    =
      i_line_header        = 'X'
      i_tab_raw_data       = it_truxs
      i_filename           = p_file
*     I_STEP               = 1
    TABLES
      i_tab_converted_data = it_upd_fom
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.


  IF it_upd_fom IS NOT INITIAL.

    READ TABLE it_upd_fom INTO DATA(ls_upd) INDEX 1.
    TRANSLATE ls_upd-ordertyp TO UPPER CASE.
    IF sy-subrc = 0.
      IF ls_upd-ordertyp = 'ZFOM' AND ls_upd-sold_name CN '0123456789'.
        PERFORM bapi_ordtyp_fom.                                          ""process bapi for one time customer
      ELSEIF ls_upd-ordertyp = 'ZLFO' AND ls_upd-sold_name CO '0123456789'.
        PERFORM bapi_ordtyp_lfo.                                          ""process bapi for regular customer
      ELSE.
        MESSAGE TEXT-110 TYPE 'I' DISPLAY LIKE 'E' .
        LEAVE LIST-PROCESSING.
      ENDIF.
    ENDIF.
  ELSE.
    MESSAGE TEXT-103 TYPE 'I' DISPLAY LIKE 'E' .
    CLEAR p_file.
    LEAVE LIST-PROCESSING.
  ENDIF.

*&---------------------------------------------------------------------*
*& Form dsply_output
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM dsply_output .
  wa_layo-zebra = 'X'.
  wa_layo-colwidth_optimize = 'X'.
  DATA: c_pos TYPE i.

  c_pos = c_pos + 1.
  wa_fcat-fieldname = 'COL'.
  wa_fcat-tabname = 'LT_OUTPUT'.
  wa_fcat-col_pos = c_pos.
  wa_fcat-seltext_l = TEXT-106.
  wa_fcat-just      = 'C'.
  APPEND wa_fcat TO it_fcat.
  CLEAR wa_fcat.

  c_pos = c_pos + 1.
  wa_fcat-fieldname = 'STATUS'.
  wa_fcat-tabname = 'LT_OUTPUT'.
  wa_fcat-col_pos = c_pos.
  wa_fcat-seltext_l = TEXT-107.
  wa_fcat-just      = 'C'.
  APPEND wa_fcat TO it_fcat.
  CLEAR wa_fcat.

  c_pos = c_pos + 1.
  wa_fcat-fieldname = 'MESSAGE'.
  wa_fcat-tabname = 'LT_OUTPUT'.
  wa_fcat-col_pos = c_pos.
  wa_fcat-seltext_l = TEXT-108.
  wa_fcat-just      = 'C'.
  APPEND wa_fcat TO it_fcat.
  CLEAR wa_fcat.

  c_pos = c_pos + 1.
  wa_fcat-fieldname = 'SO_NUM'.
  wa_fcat-tabname = 'LT_OUTPUT'.
  wa_fcat-col_pos = c_pos.
  wa_fcat-seltext_l = TEXT-109.
  wa_fcat-just      = 'C'.
  wa_fcat-hotspot   = 'X'.
  APPEND wa_fcat TO it_fcat.
  CLEAR wa_fcat.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program      = sy-repid
      i_callback_user_command = 'UCOMM'
      is_layout               = wa_layo
      it_fieldcat             = it_fcat
*     IT_EVENTS               = lt_event1
      i_default               = 'X'
      i_save                  = 'X'
    TABLES
      t_outtab                = Lt_output
    EXCEPTIONS
      program_error           = 1
      OTHERS                  = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.



ENDFORM.
FORM ucomm  USING    r_ucomm_ekpo      TYPE sy-ucomm
                 CHANGING rs_selfield  TYPE slis_selfield.
  DATA: v_vbeln TYPE vbfa-vbeln.
  v_vbeln = rs_selfield-value.
  CASE r_ucomm_ekpo.
    WHEN '&IC1'.
      IF v_vbeln IS NOT INITIAL.
        IF rs_selfield-fieldname = 'SO_NUM'.
          SET PARAMETER ID 'AUN' FIELD v_vbeln.
          CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
        ELSE.
          MESSAGE 'Invalid Field' TYPE 'S'.
        ENDIF.
      ENDIF.
  ENDCASE.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form bapi_ordtyp_lfo
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM bapi_ordtyp_lfo .

  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
*     I_FIELD_SEPERATOR    =
      i_line_header        = 'X'
      i_tab_raw_data       = it_truxs
      i_filename           = p_file
*     I_STEP               = 1
    TABLES
      i_tab_converted_data = it_upd_lfo
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  """""""""""""""""""""""""""Addhar No. and order type check""""""""""""""""""""""""""""""
  DATA(lfo_cnt) = 1.
  LOOP AT it_upd_lfo INTO DATA(check1).
    adh_len = strlen( check1-adh_no ).
    TRANSLATE check1-ordertyp TO UPPER CASE.
    """""""""""""""""""""Aadhar no. check"""""""""""""""""""""""""""""
    IF adh_len <> 12.
      wa_smesg-arbgb = |LINE NO.{ lfo_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-msgv1 = |Check Addhar No. length|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,adh_len.
    ENDIF.

    IF check1-adh_no CN '0123456789'..
      wa_smesg-arbgb = |LINE NO.{ lfo_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-msgv1 = |Enter only no. at place of Addhar No.|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check1-adh_no.
    ENDIF.

    IF check1-ordertyp <> 'ZLFO'.
      wa_smesg-arbgb = |LINE NO.{ lfo_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-msgv1 = |This order type is not for one time customer|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check1-ordertyp.
    ENDIF.
    """""""""""""""""""""""""""end"""""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""sold-to-party/ship-to-party check""""""""""""""""
    IF check1-soldto IS INITIAL.
      wa_smesg-arbgb = |LINE NO.{ lfo_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-msgv1 = |Enter value in Sold to party|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check1-soldto.
    ENDIF.
    IF check1-shipto IS INITIAL.
      wa_smesg-arbgb = |LINE NO.{ lfo_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-msgv1 = |Enter value in Ship to party|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check1-soldto.
    ENDIF.
    """"""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""""""
    lfo_cnt = lfo_cnt + 1.
  ENDLOOP.

  IF it_smesg IS NOT INITIAL.
    CALL FUNCTION 'FB_MESSAGES_DISPLAY_POPUP'
      EXPORTING
        it_smesg        = it_smesg
*       ID_SMESG_ZEILE  =
*       IT_RETURN       =
*       ID_SEND_IF_ONE  =
      EXCEPTIONS
        no_messages     = 1
        popup_cancelled = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
    REFRESH it_smesg.
    CLEAR lfo_cnt.
    LEAVE LIST-PROCESSING.
  ENDIF.
  """"""""""""""""""""""""""""""""'end"""""""""""""""""""""""""""""""""""""


  DATA(it_upd_tmp) = it_upd_lfo.

  LOOP AT it_upd_lfo ASSIGNING FIELD-SYMBOL(<fs_head_lf>).

    DELETE ADJACENT DUPLICATES FROM it_upd_lfo COMPARING uni_key.

    LS_head-doc_type   = <fs_head_lf>-ordertyp .
    LS_head-sales_org  = <fs_head_lf>-sorg .
    LS_head-distr_chan = <fs_head_lf>-distchanl .
    LS_head-division   = <fs_head_lf>-division .
    LS_head-purch_no_c   = <fs_head_lf>-adh_no .
    LS_head-name      =    tmp_file2.

    lv_soldto  =  <fs_head_lf>-soldto.
    lv_shipto  =  <fs_head_lf>-shipto.

    lv_shipto   =  |{  lv_shipto ALPHA =   IN }|.

    lv_soldto   =  |{  lv_soldto ALPHA =  IN }|.

    CLEAR : <fs_head_lf>-soldto .
    CLEAR : <fs_head_lf>-shipto .

    <fs_head_lf>-soldto  = lv_soldto .
    <fs_head_lf>-shipto  = lv_shipto .

    LS_partner-partn_role =  'WE'.                  "Ship-to-party
    LS_partner-partn_numb =   <fs_head_lf>-shipto.
    APPEND LS_partner TO LT_partner.
    CLEAR : LS_partner.

    LS_partner-partn_role =  'AG'.                   "Sold-to-party
    LS_partner-partn_numb =   <fs_head_lf>-soldto.
    APPEND LS_partner TO Lt_partner.
    CLEAR :LS_partner.

    order_header_inx-updateflag  =   'I'.
    order_header_inx-doc_type    =   'X'.
    order_header_inx-sales_org   =   'X'.
    order_header_inx-distr_chan  =   'X'.
    order_header_inx-division    =   'X'.

    APPEND order_header_inx.
    CLEAR: order_header_inx.

    DATA(hd_tbx1) = sy-tabix.
    DATA: cnt1_1 TYPE i.
    LOOP AT it_upd_TMP ASSIGNING FIELD-SYMBOL(<fs_item_lf>) WHERE uni_key = <fs_head_lf>-uni_key.

      IF hd_tbx1 GE 2 .
        cnt1_1 = cnt1_1 + 1.
        DATA(srno1)   = cnt1_1.
      ELSEIF hd_tbx1 = 1.
        srno1  =   sy-tabix.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
        EXPORTING
          input  = <fs_item_lf>-material
        IMPORTING
          output = <fs_item_lf>-material.

      LS_item-material        =  <fs_item_lf>-material.
      LS_item-target_qty      =  <fs_item_lf>-quantity.
      LS_item-target_qu       =  <fs_item_lf>-uom.
      LS_item-itm_number      =    srno1 * 10  .
      order_items_inx-updateflag   = 'I'.
      order_items_inx-material     = 'X'.
      order_items_inx-plant        = 'X'.
      order_items_inx-store_loc    = 'X'.
      order_items_inx-target_qty   = 'X'.
      order_items_inx-target_qu    = 'X'.
      APPEND order_items_inx .
      CLEAR : order_items_inx.

      order_schedules_in-req_qty    =  <fs_item_lf>-quantity.
      order_schedules_in-itm_number =   srno1 * 10 .
      order_schedules_in-sched_line =   srno1 * 10 .
      APPEND order_schedules_in.
      CLEAR order_schedules_in.

      order_schedules_inx-updateflag  = 'I'.
      order_schedules_inx-itm_number  = 'X'.
      order_schedules_inx-sched_line  = 'X'.
      order_schedules_inx-itm_number  = 'X'.
      order_schedules_inx-req_qty     = 'X'.
      APPEND order_schedules_inx.
      CLEAR : order_schedules_inx.

      """""""""""""""""""""""""""""DISCOUNT"""""""""""""""""""
*      if <fs_item_fo>-dscunt_amt is not INITIAL.
*      order_conditions_in-itm_number = srno1 * 10 .
*      order_conditions_in-cond_type =  'K007'."<fs_item_LF>-dscunt.
*      order_conditions_in-cond_value = <fs_item_LF>-dscunt_amt * 10.
*      order_conditions_in-currency = 'INR'.
**      order_conditions_in-COND_UNIT =
*      APPEND order_conditions_in.
*      CLEAR : order_conditions_in.
*
*      order_conditions_inx-itm_number = 'X'.
*      order_conditions_inx-cond_type =  'X'.
*      order_conditions_inx-cond_value = 'X'.
*      order_conditions_inx-currency = 'X'.
**      order_conditions_in-COND_UNIT =
*      APPEND order_conditions_inX.
*      CLEAR : order_conditions_inX.
*       endif.
      """""""""""""""""""""""""""""FREIGHT_amt""""""""""""""
*      if <fs_item_fo>-FREIGHT_amt is NOT INITIAL.
*      order_conditions_in-itm_number = srno1 * 10 .
*      order_conditions_in-cond_type =  'KF00'."<fs_item_LF>-FREIGHT.
*      order_conditions_in-cond_value = <fs_item_LF>-FREIGHT_amt.
*      order_conditions_in-currency = 'INR'.
**      order_conditions_in-COND_UNIT =
*      APPEND order_conditions_in.
*      CLEAR : order_conditions_in.
*
*      order_conditions_inx-itm_number = 'X'.
*      order_conditions_inx-cond_type =  'X'.
*      order_conditions_inx-cond_value = 'X'.
*      order_conditions_inx-currency = 'X'.
**      order_conditions_in-COND_UNIT =
*      APPEND order_conditions_inX.
*      CLEAR : order_conditions_inX.
*       endif.
      """"""""""""""""""""""""""""""""""""""""""""

      APPEND LS_item TO Lt_item.
      CLEAR : LS_item,<fs_item_lf>.
    ENDLOOP.
    CLEAR: cnt1_1,srno1,hd_tbx1.

    CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
      EXPORTING
*       salesdocumentin     = salesdocument
        order_header_in     = LS_head
        order_header_inx    = order_header_inx
*       SENDER              =
*       BINARY_RELATIONSHIPTYPE       =
*       INT_NUMBER_ASSIGNMENT         =
*       BEHAVE_WHEN_ERROR   =
*       LOGIC_SWITCH        =
*       TESTRUN             =
*       CONVERT             = ' '
      IMPORTING
        salesdocument       = salesdocument
      TABLES
        return              = lt_return1
        order_items_in      = Lt_item
        order_items_inx     = order_items_inx
        order_partners      = Lt_partner
        order_schedules_in  = order_schedules_in
        order_schedules_inx = order_schedules_inx
*        order_conditions_in = order_conditions_in
*        order_conditions_inx = order_conditions_inx
*       ORDER_CFGS_REF      =
*       ORDER_CFGS_INST     =
*       ORDER_CFGS_PART_OF  =
*       ORDER_CFGS_VALUE    =
*       ORDER_CFGS_BLOB     =
*       ORDER_CFGS_VK       =
*       ORDER_CFGS_REFINST  =
*       ORDER_CCARD         =
*       ORDER_TEXT          =
*       ORDER_KEYS          =
*       EXTENSIONIN         =
*       PARTNERADDRESSES    =
*       EXTENSIONEX         =
*       NFMETALLITMS        =
      .

    IF salesdocument IS NOT INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.


    IF lt_return1 IS NOT INITIAL .
      DELETE LT_RETURN1 WHERE TYPE = 'E' AND ID = 'V4' AND NUMBER = '248'." and message_v1 = 'VBAPKOM'.   ""having unrelevent message
      DESCRIBE TABLE lt_return1 LINES DATA(cnt).
      READ TABLE lt_return1 INTO DATA(ls_ret) INDEX  cnt.
      IF ls_ret-type = 'S'.
        ls_output-status = 'S'.
        ls_output-message = TEXT-104.
        ls_output-so_num = ls_ret-message_v2.
        ls_output-col = col.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output,ls_ret.
      ELSEIF ls_ret-type = 'E'.
        cnt = cnt - 1.
        READ TABLE lt_return1 INTO ls_ret INDEX  cnt.
        ls_output-status = 'E'.
        ls_output-message = ls_ret-message.
        ls_output-so_num = ' '.
        ls_output-col = col.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output,ls_ret.
      ENDIF.
    ENDIF.
    col = col + 1.
    CLEAR: cnt.

    REFRESH : Lt_item,order_schedules_inx ,order_schedules_in,order_items_inx, Lt_partner,order_conditions_in,
              order_conditions_inx,lt_return1 .
    CLEAR: ls_head,<fs_head_lf>.
  ENDLOOP.

  CLEAR:col.

  IF  Lt_output IS NOT INITIAL.
    PERFORM dsply_output.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form bapi_ordtyp_fom
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM bapi_ordtyp_fom .

  """""""""""""""""""""""""""Addhar No., PAN Card no. check""""""""""""""""""""""""""""""
  DATA(fom_cnt) = 1.
  LOOP AT it_upd_fom INTO DATA(check).
    len = strlen( check-adh_no ).
    len1 = strlen( check-PAN_no ).
    len2 = strlen( check-pst_cd ).
    len3 = strlen( check-mob_no ).

    TRANSLATE check-PAN_no TO UPPER CASE.
    TRANSLATE check-pst_cd TO UPPER CASE.
    TRANSLATE check-mob_no TO UPPER CASE.
    TRANSLATE check-ordertyp TO UPPER CASE.
    """""""""""""""""""Aadhar no.check"""""""""""""""""""""""""""""""""
    IF len <> 12.
      wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-txtnr = |000|.
      wa_smesg-msgv1 = |Check Addhar No.length|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,len.
    ENDIF.

    IF check-adh_no CN '0123456789'..
      wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-txtnr = |000|.
      wa_smesg-msgv1 = |Enter only number at place of Addhar No.|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check-adh_no.
    ENDIF.
    """"""""""""""""""""""""""end"""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""""order type"""""""""""""""""""""""""""""""""
    IF check-ordertyp <> 'ZFOM'.
      wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-txtnr = |000|.
      wa_smesg-msgv1 = |This order type is not for one time customer|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check-ordertyp.
    ENDIF.
    """""""""""""""""""""""Postle code""""""""""""""""""""""""""""""""""
    IF check-pst_cd IS NOT INITIAL.
      IF len2 <> 6.
        wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
        wa_smesg-msgty = |E|.
        wa_smesg-txtnr = |000|.
        wa_smesg-msgv1 = |Check Postle code length|.
        APPEND wa_smesg TO it_smesg.
        CLEAR: wa_smesg,len2.
      ENDIF.

      IF check-pst_cd CN '0123456789'..
        wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
        wa_smesg-msgty = |E|.
        wa_smesg-txtnr = |000|.
        wa_smesg-msgv1 = |Enter only number at place of Postle code|.
        APPEND wa_smesg TO it_smesg.
        CLEAR: wa_smesg,check-pst_cd.
      ENDIF.
    ENDIF.
    """"""""""""""""""""""""""end"""""""""""""""""""""""""""""""

    """""""""""""""""""""""Mobile NO""""""""""""""""""""""""""""""""""
    IF check-mob_no IS NOT INITIAL.
      IF len3 <> 10.
        wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
        wa_smesg-msgty = |E|.
        wa_smesg-txtnr = |000|.
        wa_smesg-msgv1 = |Check Mobile No.length|.
        APPEND wa_smesg TO it_smesg.
        CLEAR: wa_smesg,len3.
      ENDIF.

      IF check-mob_no CN '0123456789'..
        wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
        wa_smesg-msgty = |E|.
        wa_smesg-txtnr = |000|.
        wa_smesg-msgv1 = |Enter only number at place of Mobile No.|.
        APPEND wa_smesg TO it_smesg.
        CLEAR: wa_smesg,check-mob_no.
      ENDIF.
    ENDIF.
    """"""""""""""""""""""""""end"""""""""""""""""""""""""""""""
    """"""""""""""""""""PAN card check(alpha numeric)""""""""""""""""""""""""
    IF check-pan_no IS NOT INITIAL.

      IF len1 <> 10.
        wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
        wa_smesg-msgty = |E|.
        wa_smesg-txtnr = |000|.
        wa_smesg-msgv1 = |Check PAN Card length|.
        APPEND wa_smesg TO it_smesg.
        CLEAR: wa_smesg,len1.
      ENDIF.

      IF check-pan_no CN '0123456789' AND check-pan_no CN sy-abcde.
        IF check-pan_no NA '`~!@#$%^&*()_+={}-[]|\:;" <,>.?/'.
        ELSE.
          wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
          wa_smesg-msgty = |E|.
          wa_smesg-txtnr = |000|.
          wa_smesg-msgv1 = |Enter alpha numeric value at place of PAN card|.
          APPEND wa_smesg TO it_smesg.
          CLEAR: wa_smesg,check-pan_no.
        ENDIF.
      ELSE.
        wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
        wa_smesg-msgty = |E|.
        wa_smesg-txtnr = |000|.
        wa_smesg-msgv1 = |Enter alpha numeric value at place of PAN card|.
        APPEND wa_smesg TO it_smesg.
        CLEAR: wa_smesg,check-pan_no.
      ENDIF.
    ENDIF.
    """"""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""sold-to-party/ship-to-party check""""""""""""""""
    IF check-soldto IS INITIAL.
      wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-txtnr = |000|.
      wa_smesg-msgv1 = |Enter value in Sold to party|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check-soldto.
    ENDIF.
    IF check-shipto IS INITIAL.
      wa_smesg-arbgb = |LINE NO.{ fom_cnt }|.
      wa_smesg-msgty = |E|.
      wa_smesg-txtnr = |000|.
      wa_smesg-msgv1 = |Enter value in Ship to party|.
      APPEND wa_smesg TO it_smesg.
      CLEAR: wa_smesg,check-soldto.
    ENDIF.
    """"""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""""""
    fom_cnt = fom_cnt + 1.
  ENDLOOP.

  IF it_smesg IS NOT INITIAL.
    CALL FUNCTION 'FB_MESSAGES_DISPLAY_POPUP'
      EXPORTING
        it_smesg        = it_smesg
*       ID_SMESG_ZEILE  =
*       IT_RETURN       =
*       ID_SEND_IF_ONE  =
      EXCEPTIONS
        no_messages     = 1
        popup_cancelled = 2
        OTHERS          = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
    REFRESH: it_smesg.
    CLEAR: fom_cnt.
    LEAVE LIST-PROCESSING.
  ENDIF.
  """"""""""""""""""""""""""""""""'end"""""""""""""""""""""""""""""""""""""

  DATA(it_upd_tmp1) = it_upd_fom.

  LOOP AT it_upd_fom ASSIGNING FIELD-SYMBOL(<fs_head_fo>).

    DELETE ADJACENT DUPLICATES FROM it_upd_fom COMPARING uni_key.

    LS_head-doc_type   = <fs_head_fo>-ordertyp .
    LS_head-sales_org  = <fs_head_fo>-sorg .
    LS_head-distr_chan = <fs_head_fo>-distchanl .
    LS_head-division   = <fs_head_fo>-division .
    LS_head-purch_no_c   = <fs_head_fo>-adh_no .
    LS_head-name      =    tmp_file2.

    lv_soldto  =  <fs_head_fo>-soldto.
    lv_shipto  =  <fs_head_fo>-shipto.

    lv_shipto   =  |{  lv_shipto ALPHA =   IN }|.

    lv_soldto   =  |{  lv_soldto ALPHA =  IN }|.

    CLEAR : <fs_head_fo>-soldto .
    CLEAR : <fs_head_fo>-shipto .

    <fs_head_fo>-soldto  = lv_soldto .
    <fs_head_fo>-shipto  = lv_shipto .

    LS_partner-partn_role =  'WE'.                  "Ship-to-party
    LS_partner-partn_numb =   <fs_head_fo>-shipto.
    LS_partner-name =   <fs_head_fo>-ship_name.
    LS_partner-street =   <fs_head_fo>-street.
    LS_partner-country =   <fs_head_fo>-country.
    LS_partner-postl_code =   <fs_head_fo>-pst_cd.
    LS_partner-city =   <fs_head_fo>-city.
    LS_partner-region =   <fs_head_fo>-region.
    LS_partner-telephone =   <fs_head_fo>-mob_no.
    LS_partner-telebox =   <fs_head_fo>-pan_no.
    APPEND LS_partner TO LT_partner.
    CLEAR : LS_partner.

    LS_partner-partn_role =  'AG'.                   "Sold-to-party
    LS_partner-partn_numb =   <fs_head_fo>-soldto.
    LS_partner-name =   <fs_head_fo>-sold_name.
    LS_partner-street =   <fs_head_fo>-street.
    LS_partner-country =   <fs_head_fo>-country.
    LS_partner-postl_code =   <fs_head_fo>-pst_cd.
    LS_partner-city =   <fs_head_fo>-city.
    LS_partner-region =   <fs_head_fo>-region.
    LS_partner-telephone =   <fs_head_fo>-mob_no.
    LS_partner-telebox =   <fs_head_fo>-pan_no.
    APPEND LS_partner TO Lt_partner.
    CLEAR :LS_partner.

    order_header_inx-updateflag  =   'I'.
    order_header_inx-doc_type    =   'X'.
    order_header_inx-sales_org   =   'X'.
    order_header_inx-distr_chan  =   'X'.
    order_header_inx-division    =   'X'.

    APPEND order_header_inx.
    CLEAR: order_header_inx.


    DATA(hd_tbx2) = sy-tabix.
    DATA: cnt1_2 TYPE i.
    LOOP AT it_upd_TMP1 ASSIGNING FIELD-SYMBOL(<fs_item_fo>) WHERE uni_key = <fs_head_fo>-uni_key.

      IF hd_tbx2 GE 2 .
        cnt1_2 = cnt1_2 + 1.
        DATA(srno2)   = cnt1_2.
      ELSEIF hd_tbx2 = 1.
        srno2  =   sy-tabix.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
        EXPORTING
          input  = <fs_item_fo>-material
        IMPORTING
          output = <fs_item_fo>-material.

      LS_item-material        =  <fs_item_fo>-material.
      LS_item-target_qty      =  <fs_item_fo>-quantity.
      LS_item-target_qu       =  <fs_item_fo>-uom.
      LS_item-itm_number      =    srno2 * 10  .
      order_items_inx-updateflag   = 'I'.
      order_items_inx-material     = 'X'.
      order_items_inx-plant        = 'X'.
      order_items_inx-store_loc    = 'X'.
      order_items_inx-target_qty   = 'X'.
      order_items_inx-target_qu    = 'X'.
      APPEND order_items_inx .
      CLEAR : order_items_inx.

      order_schedules_in-req_qty    =  <fs_item_fo>-quantity.
      order_schedules_in-itm_number =   srno2 * 10 .
      order_schedules_in-sched_line =   srno2 * 10 .
      APPEND order_schedules_in.
      CLEAR order_schedules_in.

      order_schedules_inx-updateflag  = 'I'.
      order_schedules_inx-itm_number  = 'X'.
      order_schedules_inx-sched_line  = 'X'.
      order_schedules_inx-itm_number  = 'X'.
      order_schedules_inx-req_qty     = 'X'.
      APPEND order_schedules_inx.
      CLEAR : order_schedules_inx.


      """""""""""""""""""""""""""""DISCOUNT""""""""""""""""""""""""
      if <fs_item_fo>-dscunt_amt is not INITIAL.
      order_conditions_in-itm_number = srno2 * 10 .
      order_conditions_in-cond_type =  'K007'."<fs_item_fo>-dscunt.
      order_conditions_in-cond_value = <fs_item_fo>-dscunt_amt * 10.
      order_conditions_in-currency = 'INR'.
      APPEND order_conditions_in.
      CLEAR : order_conditions_in.

      order_conditions_inx-itm_number = 'X'.
      order_conditions_inx-cond_type =  'X'.
      order_conditions_inx-cond_value = 'X'.
      order_conditions_inx-currency = 'X'.
*      order_conditions_in-COND_UNIT =
      APPEND order_conditions_inX.
      CLEAR : order_conditions_inX.
      endif.
      """""""""""""""""""""""""""""FREIGHT""""""""""""""""""""""""
      if <fs_item_fo>-FREIGHT_amt is not INITIAL.
      order_conditions_in-itm_number = srno2 * 10 .
      order_conditions_in-cond_type = 'KF00'." <fs_item_fo>-FREIGHT.
      order_conditions_in-cond_value = <fs_item_fo>-FREIGHT_amt.
      order_conditions_in-currency = 'INR'.
*      order_conditions_in-COND_UNIT =
      APPEND order_conditions_in.
      CLEAR : order_conditions_in.

      order_conditions_inx-itm_number = 'X'.
      order_conditions_inx-cond_type =  'X'.
      order_conditions_inx-cond_value = 'X'.
      order_conditions_inx-currency = 'X'.
*      order_conditions_in-COND_UNIT =
      APPEND order_conditions_inX.
      CLEAR : order_conditions_inX.
      endif.
      """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      APPEND LS_item TO Lt_item.
      CLEAR : LS_item,<fs_item_fo>.

    ENDLOOP.
    CLEAR: cnt1_2,srno2,hd_tbx2.

    CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
      EXPORTING
*       salesdocumentin     = salesdocument
        order_header_in     = LS_head
        order_header_inx    = order_header_inx
*       SENDER              =
*       BINARY_RELATIONSHIPTYPE       =
*       INT_NUMBER_ASSIGNMENT         =
*       BEHAVE_WHEN_ERROR   =
*       LOGIC_SWITCH        =
*       TESTRUN             =
*       CONVERT             = ' '
      IMPORTING
        salesdocument       = salesdocument
      TABLES
        return              = lt_return1
        order_items_in      = Lt_item
        order_items_inx     = order_items_inx
        order_partners      = Lt_partner
        order_schedules_in  = order_schedules_in
        order_schedules_inx = order_schedules_inx
        order_conditions_in = order_conditions_in
        order_conditions_inx = order_conditions_inx
*       ORDER_CFGS_REF      =
*       ORDER_CFGS_INST     =
*       ORDER_CFGS_PART_OF  =
*       ORDER_CFGS_VALUE    =
*       ORDER_CFGS_BLOB     =
*       ORDER_CFGS_VK       =
*       ORDER_CFGS_REFINST  =
*       ORDER_CCARD         =
*       ORDER_TEXT          =
*       ORDER_KEYS          =
*       EXTENSIONIN         =
*       PARTNERADDRESSES    =
*       EXTENSIONEX         =
*       NFMETALLITMS        =
      .

    IF salesdocument IS NOT INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.


    IF lt_return1 IS NOT INITIAL .
      DELETE LT_RETURN1 WHERE TYPE = 'E' AND ID = 'V4' AND NUMBER = '248'." and message_v1 = 'VBAPKOM'.   ""having unrelevent message
      DESCRIBE TABLE lt_return1 LINES DATA(cnt).
      READ TABLE lt_return1 INTO DATA(ls_ret) INDEX  cnt.
      IF ls_ret-type = 'S'.
        ls_output-status = 'S'.
        ls_output-message = TEXT-104.
        ls_output-so_num = ls_ret-message_v2.
        ls_output-col = col.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output,ls_ret.
      ELSEIF ls_ret-type = 'E'.
        cnt = cnt - 1.
        READ TABLE lt_return1 INTO ls_ret INDEX  cnt.
        ls_output-status = 'E'.
        ls_output-message = ls_ret-message.
        ls_output-so_num = ' '.
        ls_output-col = col.
        APPEND ls_output TO lt_output.
        CLEAR: ls_output,ls_ret.
      ENDIF.
    ENDIF.
    col = col + 1.
    CLEAR: cnt.

    REFRESH : Lt_item,order_schedules_inx,order_schedules_in,order_items_inx, Lt_partner,order_conditions_in,
              order_conditions_inx,lt_return1 .
    CLEAR: ls_head,<fs_head_fo>.
  ENDLOOP.

  CLEAR:col.

  IF  Lt_output IS NOT INITIAL.
    PERFORM dsply_output.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form dwn_excl_regular_cust
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM dwn_excl_regular_cust .

  ls1-ordertyp   = 'ZLFO'.
  ls1-uni_key    = '1'.
*  ls1-sorg       = '5020'.
*  ls1-distchanl  = '00'.
*  ls1-division   = '28'.
*  ls1-soldto     = '91000000'.
*  ls1-shipto     = '91000000'.
*  ls1-adh_no     = '354325346545'.
*  ls1-line_itm   = '10'.
*  ls1-material   = '30000076'.
*  ls1-quantity   = '2'.
*  ls1-uom        = 'EA'.

  APPEND ls1 TO it_upd_lfo.
  CLEAR: ls1.

  ls1-ordertyp   = 'ZLFO'.
  ls1-uni_key    = '2'.

  APPEND ls1 TO it_upd_lfo.
  CLEAR: ls1.

*  APPEND 'Sales Order' TO header.
*  APPEND 'Unique Key' TO header.
*  APPEND 'Sales Org' TO header.
*  APPEND 'Distri channel' TO header.
*  APPEND 'Division' TO header.
*  APPEND 'Sold to party' TO header.
*  APPEND 'Ship to party' TO header.
*  APPEND 'Aadhar No.' TO header.
*  APPEND 'Line item' TO header.
*  APPEND 'Material' TO header.
*  APPEND 'Quantity' TO header.
*  APPEND 'UOM' TO header.


  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  "create data reference
  GET REFERENCE OF it_upd_lfo INTO lr_excel_structure.
  DATA(lo_itab_services) = cl_salv_itab_services=>create_for_table_ref( lr_excel_structure ).
  lo_source_table_descr ?= cl_abap_tabledescr=>describe_by_data_ref( lr_excel_structure  ).


  lo_table_row_descriptor ?= lo_source_table_descr->get_table_line_type( ).

  "excel instantiate
  DATA(lo_tool_xls) = cl_salv_export_tool_ats_xls=>create_for_excel(
                            EXPORTING r_data =  lr_excel_structure  ) .

  "Add columns to sheet
  DATA(lo_config) = lo_tool_xls->configuration( ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Ord typ(cell should be text format)'
        field_name           =  'ORDERTYP'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
       EXPORTING
         header_text          =  'Unique key(cell should be text format)'
         field_name           =  'UNI_KEY'
         display_type         =   if_salv_bs_model_column=>uie_text_view ).


  lo_config->add_column(
        EXPORTING
          header_text          =  'Sales org(cell should be text format)'
          field_name           =  'SORG'
          display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
        EXPORTING
          header_text          =  'Dis channel(cell should be text format)'
          field_name           =  'DISTCHANL'
          display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
        EXPORTING
          header_text          =  'Division(cell should be text format)'
          field_name           =  'DIVISION '
          display_type         =   if_salv_bs_model_column=>uie_text_view ).
  """"""
  lo_config->add_column(
      EXPORTING
        header_text          =  'Sold to party(cell should be text format)'
        field_name           =  'SOLDTO'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Ship to party(cell should be text format)'
        field_name           =  'SHIPTO'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Aadhar No.(cell should be text format)'
      field_name           =  'ADH_NO'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Line item(cell should be text format)'
      field_name           =  'LINE_ITM'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Material(cell should be text format)'
      field_name           =  'MATERIAL'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Quantity(cell should be text format)'
      field_name           =  'QUANTITY'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'UOM(cell should be text format)'
      field_name           =  'UOM'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).


  "get excel in xstring
  TRY.
      lo_tool_xls->read_result(  IMPORTING content  = lv_content  ).
    CATCH cx_root.
  ENDTRY.

  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
    EXPORTING
      buffer        = lv_content
    IMPORTING
      output_length = lv_length
    TABLES
      binary_tab    = lt_binary_tab.

  """""""""""""""""""""""""""""""

  DATA(file_name) = | LFO-{ sy-datum } { sy-uzeit } |.

  CALL METHOD cl_gui_frontend_services=>file_save_dialog
    EXPORTING
      window_title              = 'File Directory'
      default_extension         = 'XLS'
      default_file_name         = file_name
*     WITH_ENCODING             =
*     FILE_FILTER               =
      initial_directory         = 'D:\'
*     PROMPT_ON_OVERWRITE       = 'X'
    CHANGING
      filename                  = lv_filename
      path                      = lv_path
      fullpath                  = lv_fullpath
      user_action               = lv_result
*     FILE_ENCODING             =
    EXCEPTIONS
      cntl_error                = 1
      error_no_gui              = 2
      not_supported_by_gui      = 3
      invalid_default_file_name = 4
      OTHERS                    = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  lv_fname = lv_fullpath.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      bin_filesize            = lv_length "' '
      filename                = lv_fname
      filetype                = 'BIN' "'DAT'
    TABLES
      data_tab                = lt_binary_tab "it_upd_lfo
*     fieldnames              = header ""IT HEADER
    EXCEPTIONS
      file_write_error        = 1
      no_batch                = 2
      gui_refuse_filetransfer = 3
      invalid_type            = 4
      no_authority            = 5
      unknown_error           = 6
      header_not_allowed      = 7
      separator_not_allowed   = 8
      filesize_not_allowed    = 9
      header_too_long         = 10
      dp_error_create         = 11
      dp_error_send           = 12
      dp_error_write          = 13
      unknown_dp_error        = 14
      access_denied           = 15
      dp_out_of_memory        = 16
      disk_full               = 17
      dp_timeout              = 18
      file_not_found          = 19
      dataprovider_exception  = 20
      control_flush_error     = 21
      OTHERS                  = 22.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  CLEAR: ucomm,lv_fname,file_name,lv_content,lv_path,lv_fullpath,lv_filename,lv_result.
  REFRESH:it_upd_lfo,header,lt_binary_tab.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form dwn_excl_one_time_cust
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM dwn_excl_one_time_cust .

  ls-ordertyp   = 'ZFOM'.
  ls-uni_key    = '1'.
*  ls-sorg       = '5020'.
*  ls-distchanl  = '00'.
*  ls-division   = '28'.
*  ls-soldto     = '91000000'.
*  ls-sold_name =  'EF'.
*  ls-shipto     = '91000000'.
*  ls-ship_name  = 'RTR'.
*  ls-street     = 'Gandhi road'.
*  ls-pst_cd     = '262701'.
*  ls-city       = 'sangrur'.
*  ls-country    = 'IN'.
*  ls-region     = '19'.
*  ls-adh_no     = '354325346545'.
*  ls-pan_no     = '464645FGHE'.
*  ls-mob_no     = '4645756776'.
*  ls-line_itm   = '10'.
*  ls-material   = '30000076'.
*  ls-quantity   = '2'.
*  ls-uom        = 'EA'.

  APPEND ls TO it_upd_fom.
  CLEAR: ls.

  ls-ordertyp   = 'ZFOM'.
  ls-uni_key    = '2'.

  APPEND ls TO it_upd_fom.
  CLEAR: ls.

*  APPEND 'Sales Order' TO header.
*  APPEND 'Unique Key' TO header.
*  APPEND 'Sales Org' TO header.
*  APPEND 'Distri channel' TO header.
*  APPEND 'Division' TO header.
*  APPEND 'Sold to party' TO header.
*  APPEND 'Sold to party name' TO header.
*  APPEND 'Ship to party' TO header.
*  APPEND 'Ship to party name' TO header.
*  APPEND 'Street' TO header.
*  APPEND 'Postal code' TO header.
*  APPEND 'City' TO header.
*  APPEND 'Country' TO header.
*  APPEND 'Region' TO header.
*  APPEND 'Aadhar No.' TO header.
*  APPEND 'PAN No.' TO header.
*  APPEND 'Mobile No.' TO header.
*  APPEND 'Line item' TO header.
*  APPEND 'Material' TO header.
*  APPEND 'Quantity' TO header.
*  APPEND 'UOM' TO header.

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  "create data reference
  GET REFERENCE OF it_upd_fom INTO lr_excel_structure.
  DATA(lo_itab_services) = cl_salv_itab_services=>create_for_table_ref( lr_excel_structure ).
  lo_source_table_descr ?= cl_abap_tabledescr=>describe_by_data_ref( lr_excel_structure  ).


  lo_table_row_descriptor ?= lo_source_table_descr->get_table_line_type( ).

  "excel instantiate
  DATA(lo_tool_xls) = cl_salv_export_tool_ats_xls=>create_for_excel(
                            EXPORTING r_data =  lr_excel_structure  ) .

  "Add columns to sheet
  DATA(lo_config) = lo_tool_xls->configuration( ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Ord typ(cell should be text format)'
        field_name           =  'ORDERTYP'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
       EXPORTING
         header_text          =  'Unique key(cell should be text format)'
         field_name           =  'UNI_KEY'
         display_type         =   if_salv_bs_model_column=>uie_text_view ).


  lo_config->add_column(
        EXPORTING
          header_text          =  'Sales org(cell should be text format)'
          field_name           =  'SORG'
          display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
        EXPORTING
          header_text          =  'Dis channel(cell should be text format)'
          field_name           =  'DISTCHANL'
          display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
        EXPORTING
          header_text          =  'Division(cell should be text format)'
          field_name           =  'DIVISION '
          display_type         =   if_salv_bs_model_column=>uie_text_view ).
  """"""
  lo_config->add_column(
      EXPORTING
        header_text          =  'Sold to party(cell should be text format)'
        field_name           =  'SOLDTO'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Sold to party name(cell should be text format)'
        field_name           =  'SOLD_NAME '
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Ship to party(cell should be text format)'
        field_name           =  'SHIPTO'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Ship to party name(cell should be text format)'
        field_name           =  'SHIP_NAME'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Street(cell should be text format)'
        field_name           =  'STREET'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Postal code(cell should be text format)'
        field_name           =  'PST_CD'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'City(cell should be text format)'
        field_name           =  'CITY'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Country(cell should be text format)'
        field_name           =  'COUNTRY'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
      EXPORTING
        header_text          =  'Region(cell should be text format)'
        field_name           =  'REGION'
        display_type         =   if_salv_bs_model_column=>uie_text_view ).
  """""
  lo_config->add_column(
    EXPORTING
      header_text          =  'Aadhar No.(cell should be text format)'
      field_name           =  'ADH_NO'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'PAN No.(cell should be text format)'
      field_name           =  'PAN_NO'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Mobile No.(cell should be text format)'
      field_name           =  'MOB_NO'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Line item(cell should be text format)'
      field_name           =  'LINE_ITM'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Material(cell should be text format)'
      field_name           =  'MATERIAL'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'Quantity(cell should be text format)'
      field_name           =  'QUANTITY'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).

  lo_config->add_column(
    EXPORTING
      header_text          =  'UOM(cell should be text format)'
      field_name           =  'UOM'
      display_type         =   if_salv_bs_model_column=>uie_text_view ).


  "get excel in xstring
  TRY.
      lo_tool_xls->read_result(  IMPORTING content  = lv_content  ).
    CATCH cx_root.
  ENDTRY.


  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
    EXPORTING
      buffer        = lv_content
    IMPORTING
      output_length = lv_length
    TABLES
      binary_tab    = lt_binary_tab.
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  DATA(file_name1) = | FOM-{ sy-datum } { sy-uzeit } |.

  CALL METHOD cl_gui_frontend_services=>file_save_dialog
    EXPORTING
      window_title              = 'File Directory'
      default_extension         = 'xls'
      default_file_name         = file_name1
*     WITH_ENCODING             =
*     FILE_FILTER               =
      initial_directory         = 'D:\'
*     PROMPT_ON_OVERWRITE       = 'X'
    CHANGING
      filename                  = lv_filename
      path                      = lv_path
      fullpath                  = lv_fullpath
      user_action               = lv_result
*     FILE_ENCODING             =
    EXCEPTIONS
      cntl_error                = 1
      error_no_gui              = 2
      not_supported_by_gui      = 3
      invalid_default_file_name = 4
      OTHERS                    = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  lv_fname = lv_fullpath.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      bin_filesize            = lv_length "' '
      filename                = lv_fname
      filetype                = 'BIN' "'DAT'
    TABLES
      data_tab                = lt_binary_tab "it_upd_fom
*     fieldnames              = header ""IT HEADER
    EXCEPTIONS
      file_write_error        = 1
      no_batch                = 2
      gui_refuse_filetransfer = 3
      invalid_type            = 4
      no_authority            = 5
      unknown_error           = 6
      header_not_allowed      = 7
      separator_not_allowed   = 8
      filesize_not_allowed    = 9
      header_too_long         = 10
      dp_error_create         = 11
      dp_error_send           = 12
      dp_error_write          = 13
      unknown_dp_error        = 14
      access_denied           = 15
      dp_out_of_memory        = 16
      disk_full               = 17
      dp_timeout              = 18
      file_not_found          = 19
      dataprovider_exception  = 20
      control_flush_error     = 21
      OTHERS                  = 22.
  IF sy-subrc <> 0.
* Implement suitable error handling here

  ENDIF.

  CLEAR: ucomm,lv_fname,file_name1,lv_content,lv_path,lv_fullpath,lv_filename,lv_result.
  REFRESH:it_upd_FOM,header,lt_binary_tab.
ENDFORM.