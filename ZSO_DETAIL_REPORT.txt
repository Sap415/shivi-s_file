*&---------------------------------------------------------------------*
*& Include          ZSO_DETAILS_SEL
*&---------------------------------------------------------------------*

SELECTION-SCREEN BEGIN OF BLOCK b1.
 SELECT-OPTIONS :  s_VKORG FOR vbak-vkorg,
                   s_vbeln FOR vbak-vbeln,
                   s_kunnr FOR vbak-kunnr,
                   s_ERDAT FOR vbak-erdat OBLIGATORY,
                   s_matnr FOR vbap-matnr.

 PARAMETERS :  p_zfom AS CHECKBOX DEFAULT 'X' ,
               p_zlfo AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK b1.


*&---------------------------------------------------------------------*
*& Include          ZSO_DETAILS_DATA_DCL
*&---------------------------------------------------------------------*

TYPES: BEGIN OF ty_final,
         sel,
         doc_no   TYPE vbak-vbeln,
         doc_dt   TYPE vbak-erdat,
         cust_no  TYPE vbak-kunnr,
         cust_nam TYPE adrc-name1,
         regn     TYPE zstate-zregion_code,
         city     TYPE zstate-zdescription,
         mob_no   TYPE adr2-telnr_call,
         itm_no   TYPE vbap-posnr,
         mat_cod  TYPE vbap-matnr,
         mat_des  TYPE maKT-maktx,
         qty      TYPE vbaP-kwmeng,
         sal_unt  TYPE vbaP-vRKME,
         net_amt  TYPE vbak-netwr,
         curncy   TYPE vbap-waerk,
         bil_doc  TYPE vbak-vbeln,
         del_doc  TYPE vbak-vbeln,
         str_loc  TYPE lips-lgort,
         plnt     TYPE vbap-werks,
         plnt_DES TYPE T001W-NAME1,
         sal_org  TYPE vbak-vkorg,
         dis_chl  TYPE vbak-vtweg,
         divisn   TYPE vbak-spart,
         crt_on   TYPE vbak-erdat,
         crt_by   TYPE vbak-ernam,
         doc_typ  TYPE vbak-auart,
         ADH_NO  TYPE VBkd-BSTKD,
         pan_NO  TYPE adrc-extension2,
       END OF ty_final.


DATA: lt_final  TYPE TABLE OF ty_final,
      ls_final  LIKE LINE OF lt_final,

      lT_FC     TYPE slis_t_fieldcat_alv,
      ls_FC     TYPE slis_fieldcat_alv,
      ls_layo   TYPE slis_layout_alv,

      ls_top1   TYPE slis_listheader,
      ls_top2   TYPE slis_listheader,
      lt_top1   TYPE slis_t_listheader,
      lt_top2   TYPE slis_t_listheader,

      ls_event1 TYPE slis_alv_event,
      ls_event2 TYPE slis_alv_event,
      lt_event1 TYPE slis_t_event,
      lt_event2 TYPE slis_t_event.

 TYPES lr_auart_type TYPE RANGE OF auart.
 TYPES lr_matnr_type TYPE RANGE OF matnr.


*&---------------------------------------------------------------------*
*& Include          ZSO_DETAILS_PROCESS_DATA
*&---------------------------------------------------------------------*

START-OF-SELECTION.
perform fetch_data.
*perform populate_data.
perform build_fcat.
perform display_alv.



*&---------------------------------------------------------------------*
*& Report ZSO_DETAIL_REPORT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zso_detail_report.

TABLES: vbak,vbap,mara.

TYPE-POOLS slis.
INCLUDE zso_details_sel.
INCLUDE zso_details_data_dcl.
INCLUDE zso_details_process_data.
*&---------------------------------------------------------------------*
*& Form fetch_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_data .

  IF p_zfom IS INITIAL AND p_zlfo IS INITIAL.
    MESSAGE TEXT-001 TYPE 'I' .
    LEAVE LIST-PROCESSING.
  ENDIF.




  IF p_zfom IS NOT INITIAL AND p_zlfo IS INITIAL.
    DATA(auart_rng) = VALUE lr_auart_type( sign = 'I' option = 'EQ'
                                     ( low = 'ZFOM' ) ).
  ELSEIF p_zfom IS INITIAL AND p_zlfo IS NOT INITIAL.
    auart_rng = VALUE lr_auart_type( sign = 'I' option = 'EQ'
                                    ( low = 'ZLFO' ) ).
  ELSEIF p_zfom IS NOT INITIAL AND p_zlfo IS NOT INITIAL.
    auart_rng = VALUE lr_auart_type( sign = 'I' option = 'EQ'
                                    ( low = 'ZFOM'  )
                                    ( low = 'ZLFO' ) ).
  ENDIF.

  SELECT  vbeln,     "sal_doc
          erdat,     "doc_dt
          kunnr,
          auart,
          vbtyp,
          vkorg,
          vtweg,
          spart,
          ernam
     FROM vbak
     INTO TABLE @DATA(Lt_vbak)
     WHERE vbeln IN @s_vbeln
     AND erdat IN  @s_erdat
     AND kunnr IN  @s_kunnr
     AND vkorg IN  @s_vkorg
     AND auart IN @auart_rng.


  IF lt_vbak[] IS NOT INITIAL.
    SELECT vbeln,
           posnr,   "itm
           kwmeng,  "qty
           vrkme,   "sal_unt
           matnr,   "material
           werks,    "curr
           netwr,
           gsber,
           waerk
      FROM vbap
      INTO TABLE @DATA(lt_vbap)
      FOR ALL ENTRIES IN @lt_vbak
      WHERE vbeln = @lt_vbak-vbeln
      AND matnr IN @s_matnr.

    SORT lt_vbap BY vbeln posnr ASCENDING.


    IF lt_vbap[] IS NOT INITIAL.

*      data(lt_mat_tmp) = lt_vbap.
*      DELETE ADJACENT DUPLICATES FROM lt_mat_tmp COMPARING vbeln .
*      DELETE ADJACENT DUPLICATES FROM lt_mat_tmp COMPARING matnr .

      SELECT matnr,
             maktx,   "mat_des
             spras
             FROM makt
             INTO TABLE @DATA(lt_makt)
             FOR ALL ENTRIES IN @lt_vbap
             WHERE matnr = @lt_vbap-matnr
*             WHERE matnr = @lt_mat_tmp-matnr
             AND spras = 'E'.


      SELECT vbelv,            ""BIL_DOC / DEL_DOC
             posnv,
             vbeln,
             vbtyp_n,
             posnn
             FROM vbfa
             INTO TABLE @DATA(lt_vbfa)
             FOR ALL ENTRIES IN @lt_vbap
             WHERE vbelv = @lt_vbap-vbeln
             AND posnv = @lt_vbap-posnr
             AND vbtyp_n IN ('J','M').   ""J FOR DEL_DOC AND M FOR BILL DOC

      SORT lt_vbfa BY vbelv posnv ASCENDING.


      SELECT  werks,
              name1
              FROM t001w
              INTO TABLE @DATA(lt_PLN_DES)
              FOR ALL ENTRIES IN @lt_vbap
              WHERE werks = @lt_vbap-werks.


      IF lt_vbfa[] IS NOT INITIAL.
        SELECT vbeln,
               lgort        "str_loc
               FROM lips
               INTO TABLE @DATA(lt_lips)
               FOR ALL ENTRIES IN @lt_vbfa
               WHERE vbeln = @lt_vbfa-vbeln.
      ENDIF.

    ENDIF.

    SELECT vbeln,
           adrnr,
           parvw,
           kunnr,  "cust_no
           assigned_bp
           FROM vbpa
           INTO TABLE @DATA(lt_vbpa)
           FOR ALL ENTRIES IN @lt_vbak
           WHERE vbeln = @lt_vbak-vbeln
           AND parvw = 'AG'.

    SORT lt_vbpa BY vbeln ASCENDING.

    IF lt_vbpa[] IS NOT INITIAL.

      SELECT addrnumber,
             name1,     "cust_nam
             house_num1,
             street,
             city1,
             post_code1,
             region,
             tel_number,   "tele_no
             extension2    ""pan_no (for ZFOM CUST)
             FROM adrc
             INTO TABLE @DATA(lt_adrc)
             FOR ALL ENTRIES IN @lt_vbpa
             WHERE addrnumber = @lt_vbpa-adrnr.

*      SELECT r3_user,   "mob_no
*             addrnumber,
*             telnr_call
*             FROM adr2
*             INTO TABLE @DATA(lt_adr2)
*             FOR ALL ENTRIES IN @lt_vbpa
*             WHERE addrnumber = @lt_vbpa-adrnr.
*             AND r3_user = '3'.

      SELECT partner,
             idnumber
             FROM but0id INTO TABLE @DATA(lt_but)     ""ZLFO "DIRECT    (Aadhar no)
             FOR ALL ENTRIES IN @lt_vbpa
             WHERE partner = @lt_vbpa-assigned_bp .

    ENDIF.

    IF lt_adrc[] IS NOT INITIAL.
      SELECT zstate_code,
             zregion_code,   "rgn
             zdescription    "city
             FROM zstate
             INTO TABLE @DATA(lt_state_buyer)
             FOR ALL ENTRIES IN @lt_adrc
             WHERE zregion_code = @lt_adrc-region.

    ENDIF.
    """""""""""""""""""""""""""""""""str_loc""""""""""""""""""""""""""""""""""

*    IF lt_str_loc[] IS NOT INITIAL.
*    SELECT vbeln,
*           lgort        "str_loc
*           FROM lips
*           INTO TABLE @DATA(lt_lips)
*             FOR ALL ENTRIES IN @lt_str_loc
*             WHERE vbeln = @lt_str_loc-vbeln.
*
*    ENDIF.

    """""""""""""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""
    """""""""""""""""""""""""Aadhar no. as per order type"""""""""""""""""""""
    SELECT vbeln,
           bstkd   "ADH_NO
           FROM vbkd INTO TABLE @DATA(lt_vbkd)    ""zfom  ""one time (aadhar no)
           FOR ALL ENTRIES IN @lt_vbak
           WHERE vbeln = @lt_vbak-vbeln.

    """""""""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""""'

    """"""""""""""""""""""""""PAN NO FOR ZLFOM (REGULAR)"""""""""""""""""""""
    SELECT KUNNR,
           J_1IPANNO
           FROM KNA1 INTO TABLE @DATA(LT_PAN_LFO)
           FOR ALL ENTRIES IN @LT_VBAK
           WHERE KUNNR = @LT_VBAK-KUNNR.

    """""""""""""""""""""""""""""""""END"""""""""""""""""""""""""""""""""""""

  ENDIF.
  """"""""""""""""""""""""""""""""""""""""""PROCESS_DATA"""""""""""""""""""""""""""""""""""""""""""""
*  LOOP AT lt_vbap INTO DATA(ls_vbap).
  LOOP AT lt_vbap INTO DATA(ls_vbap).


    ls_final-mat_cod = ls_vbap-matnr.
    SHIFT ls_final-mat_cod LEFT DELETING LEADING '0'.
    ls_final-itm_no  = ls_vbap-posnr.
    ls_final-qty     = ls_vbap-kwmeng.
    ls_final-sal_unt = ls_vbap-vrkme.
    ls_final-curncy  = ls_vbap-waerk.
    ls_final-net_amt  = ls_vbap-netwr.
    ls_final-plnt  = ls_vbap-werks.

    READ TABLE lt_vbak INTO DATA(ls_vbak) WITH KEY vbeln = ls_vbap-vbeln.
    IF sy-subrc = 0.
      ls_final-doc_no = ls_vbak-vbeln.
      ls_final-doc_dt = ls_vbak-erdat.
      ls_final-sal_org = ls_vbak-vkorg.
      ls_final-dis_chl = ls_vbak-vtweg.
      ls_final-divisn = ls_vbak-spart.
      ls_final-crt_on = ls_vbak-erdat.
      ls_final-crt_by = ls_vbak-ernam.
      ls_final-doc_typ = ls_vbak-auart.
      SHIFT ls_final-doc_no LEFT DELETING LEADING '0'.
    ENDIF.


    READ TABLE lt_makt INTO DATA(ls_makt) WITH KEY matnr = ls_vbap-matnr.
    IF sy-subrc = 0.
      ls_final-mat_des = ls_makt-maktx.
    ENDIF.
    CLEAR: ls_makt.

    READ TABLE lt_vbfa INTO DATA(ls_vbfa) WITH KEY vbelv = ls_vbap-vbeln
                                                   posnv = ls_vbap-posnr
                                                   vbtyp_n = 'J'.
    IF sy-subrc = 0.
      ls_final-del_doc = ls_vbfa-vbeln.
      SHIFT ls_final-del_doc LEFT DELETING LEADING '0'.
    ENDIF.

    """""""""""""""""""""""""str_loc"""""""""""""""""""""""""""
    READ TABLE lt_lips INTO DATA(ls_lips) WITH KEY vbeln = ls_vbfa-vbeln.
    IF sy-subrc = 0.
      ls_final-str_loc =  ls_lips-lgort.
    ENDIF.

    """""""""""""""""""""""""""""end""""""""""""""""""""""""""""
    CLEAR: ls_vbfa.

    READ TABLE lt_vbfa INTO ls_vbfa WITH KEY vbelv = ls_vbap-vbeln
                                             posnv = ls_vbap-posnr
                                             vbtyp_n = 'M'.
    IF sy-subrc = 0.
      ls_final-bil_doc = ls_vbfa-vbeln.
      SHIFT ls_final-bil_doc LEFT DELETING LEADING '0'.
    ENDIF.
    CLEAR: ls_vbfa.

    READ TABLE lt_vbpa INTO DATA(ls_vbpa) WITH KEY vbeln = ls_vbap-vbeln.
    IF sy-subrc = 0.
      ls_final-cust_no = ls_vbpa-kunnr.
      SHIFT ls_final-cust_no LEFT DELETING LEADING '0'.
    ENDIF.


    READ TABLE lt_adrc INTO DATA(ls_adrc) WITH KEY addrnumber = ls_vbpa-adrnr.
    IF sy-subrc = 0.
      ls_final-cust_nam = ls_adrc-name1.
      ls_final-mob_no = ls_adrc-tel_number.
      IF ls_vbak-auart = 'ZFOM'.
        ls_final-pan_no = ls_adrc-extension2.   """""PAN_NO FOR 'ZFOM' CUSTOMER
      ENDIF.
    ENDIF.

    READ TABLE lt_PAN_LFO INTO DATA(ls_PAN) WITH KEY KUNNR = lS_vbAK-KUNNR.
    IF sy-subrc = 0.
    IF LS_VBAK-AUART = 'ZLFO'.
      ls_final-PAN_no = lS_PAN-J_1IPANNO.   """PAN_NO FOR ZLFOM CUSTOMER
    ENDIF.
    ENDIF.


    READ TABLE lt_state_buyer INTO DATA(ls_stat) WITH KEY zregion_code = lS_adrc-region.
    IF sy-subrc = 0.
      ls_final-regn =  ls_stat-zregion_code.
      ls_final-city = ls_stat-zdescription.
    ENDIF.


    """"""""""""""""""""""""""""""""""aadhr no as per order typ""""""""""""""""""""""""
    IF ls_vbak-auart = 'ZFOM'.
      READ TABLE Lt_vbkd INTO DATA(ls_vbkd) WITH KEY vbeln  = ls_vbap-vbeln.
      IF sy-subrc = 0.
        ls_final-adh_no = LS_VBkd-bstkd. ""CUST_R
      ENDIF.

    ELSEIF ls_vbak-auart = 'ZLFO'.

      READ TABLE lt_but INTO DATA(ls_but) WITH KEY partner = lS_vbpa-assigned_bp.
      IF sy-subrc = 0.
        ls_final-adh_no = ls_but-idnumber.
      ENDIF.

    ENDIF.

    """""""""""""""""""""""""""""""""""""""""end""""""""""""""""""""""""""""""""""""""
    READ TABLE lt_PLN_DES INTO DATA(ls_PLV_DES) WITH KEY werks = lS_vbap-werks.
    IF sy-subrc = 0.
      ls_final-plnt_des = ls_PLV_DES-name1.
    ENDIF.

    APPEND ls_final TO lt_final.
    CLEAR: ls_final,ls_vbap,ls_adrc,ls_vbpa,ls_lips,ls_vbak,ls_adrc,ls_vbpa,ls_vbkd,lS_PAN.

  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form build_fcat
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM build_fcat .

  Lt_fc = VALUE #(
     ( fieldname = |DOC_TYP|  tabname = |LT_FINAL| seltext_M = |Document Type|         just = |C| )
     ( fieldname = |DOC_DT|   tabname = |LT_FINAL| seltext_M = |Document Date|         just = |C| )
     ( fieldname = |DOC_NO|   tabname = |LT_FINAL| seltext_M = |Sales Document Type|   just = |C| hotspot = |X| )
     ( fieldname = |SAL_ORG|  tabname = |LT_FINAL| seltext_M = |Sales Organization|    just = |C|  )
     ( fieldname = |DIS_CHL|  tabname = |LT_FINAL| seltext_M = |Distribution Channel|  just = |C|  )
     ( fieldname = |DIVISN|   tabname = |LT_FINAL| seltext_M = |Division|              just = |C|  )
     ( fieldname = |CUST_NO|  tabname = |LT_FINAL| seltext_M = |Customer No.|          just = |C|  )
     ( fieldname = |CUST_NAM| tabname = |LT_FINAL| seltext_M = |Customer Name|         just = |C|  )
     ( fieldname = |REGN|     tabname = |LT_FINAL| seltext_M = |Region|                just = |C|  )
     ( fieldname = |CITY|     tabname = |LT_FINAL| seltext_M = |City|                  just = |L|  )
     ( fieldname = |MOB_NO|   tabname = |LT_FINAL| seltext_M = |Telephone No.|         just = |C|  )
     ( fieldname = |ADH_NO|   tabname = |LT_FINAL| seltext_M = |Aadhar No.|            just = |C|  )
     ( fieldname = |PAN_NO|   tabname = |LT_FINAL| seltext_M = |Pan Card No.|          just = |C|  )
     ( fieldname = |ITM_NO|   tabname = |LT_FINAL| seltext_M = |Item No|               just = |C|  )
     ( fieldname = |MAT_COD|   tabname = |LT_FINAL| seltext_M = |Material Code|        just = |C|  )
     ( fieldname = |MAT_DES|  tabname = |LT_FINAL| seltext_M = |Material Description|  just = |L|  )
     ( fieldname = |QTY|      tabname = |LT_FINAL| seltext_M = |Quantity|              just = |R|  )
     ( fieldname = |SAL_UNT|  tabname = |LT_FINAL| seltext_M = |Sales Unit|            just = |C|  )
     ( fieldname = |PLNT|     tabname = |LT_FINAL| seltext_M = |Plant|                 just = |C|  )
     ( fieldname = |PLNT_DES|     tabname = |LT_FINAL| seltext_M = |Plant Name|        just = |C|  )
     ( fieldname = |STR_LOC|  tabname = |LT_FINAL| seltext_M = |Storage location|      just = |C|  )
     ( fieldname = |NET_AMT|  tabname = |LT_FINAL| seltext_M = |Net Amount|            just = |R|  )
     ( fieldname = |CURNCY|   tabname = |LT_FINAL| seltext_M = |Currency|              just = |C|  )
     ( fieldname = |DEL_DOC|  tabname = |LT_FINAL| seltext_M = |Delivery Document|     just = |C| hotspot = |X| )
     ( fieldname = |BIL_DOC|  tabname = |LT_FINAL| seltext_M = |Billing Document|      just = |C| hotspot = |X| )
     ( fieldname = |CRT_BY|   tabname = |LT_FINAL| seltext_M = |SO Created By|            just = |L| )
     ( fieldname = |CRT_ON|   tabname = |LT_FINAL| seltext_M = |SO Created On|            just = |C| )
      ).

  LS_layo  = VALUE #( BOX_fieldname = |SEL|  colwidth_optimize = 'X' zebra = |X| ).

ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_alv
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv .

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_INTERFACE_CHECK       = ' '
*     I_BYPASSING_BUFFER      = ' '
*     I_BUFFER_ACTIVE         = ' '
      i_callback_program      = sy-repid
*     I_CALLBACK_PF_STATUS_SET          = ' '
      i_callback_user_command = 'UCOMM'
*     I_CALLBACK_TOP_OF_PAGE  = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME        =
*     I_BACKGROUND_ID         = ' '
*     I_GRID_TITLE            =
*     I_GRID_SETTINGS         =
      is_layout               = ls_layo
      it_fieldcat             = lt_fc
*     IT_EXCLUDING            =
*     IT_SPECIAL_GROUPS       =
*     IT_SORT                 =
*     IT_FILTER               =
*     IS_SEL_HIDE             =
*     I_DEFAULT               = 'X'
*     I_SAVE                  = ' '
*     IS_VARIANT              =
      it_events               = lt_event1
*     IT_EVENT_EXIT           =
*     IS_PRINT                =
*     IS_REPREP_ID            =
*     I_SCREEN_START_COLUMN   = 0
*     I_SCREEN_START_LINE     = 0
*     I_SCREEN_END_COLUMN     = 0
*     I_SCREEN_END_LINE       = 0
*     I_HTML_HEIGHT_TOP       = 0
*     I_HTML_HEIGHT_END       = 0
*     IT_ALV_GRAPHICS         =
*     IT_HYPERLINK            =
*     IT_ADD_FIELDCAT         =
*     IT_EXCEPT_QINFO         =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*     O_PREVIOUS_SRAL_HANDLER =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER =
*     ES_EXIT_CAUSED_BY_USER  =
    TABLES
      t_outtab                = lt_final
    EXCEPTIONS
      program_error           = 1
      OTHERS                  = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
FORM ucomm  USING    r_ucomm_ekpo      TYPE sy-ucomm
                 CHANGING rs_selfield  TYPE slis_selfield.
  DATA: v_vbeln TYPE vbfa-vbeln.
  v_vbeln = rs_selfield-value.
  CASE r_ucomm_ekpo.
    WHEN '&IC1'.
      IF v_vbeln IS NOT INITIAL.
        IF rs_selfield-fieldname = 'BIL_DOC'.
          SET PARAMETER ID 'VF' FIELD v_vbeln.
          CALL TRANSACTION 'VF03' AND SKIP FIRST SCREEN.
        ELSEIF rs_selfield-fieldname = 'DEL_DOC'.
          SET PARAMETER ID 'VL' FIELD v_vbeln.
          CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN.
        ELSEIF rs_selfield-fieldname = 'DOC_NO'.
          SET PARAMETER ID 'AUN' FIELD v_vbeln.
          CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
        ELSE.
          MESSAGE 'Invalid Field' TYPE 'S'.
        ENDIF.
*    ELSEIF v_vbeln is INITIAL.
*      IF rs_selfield-fieldname = 'BIL_DOC'.
*        SET PARAMETER ID 'VF' FIELD v_vbeln.
*        clear: v_vbeln.
*        CALL TRANSACTION 'VF01'.
*      ELSEIF rs_selfield-fieldname = 'DEL_DOC'.
*        SET PARAMETER ID 'VL' FIELD v_vbeln.
*        clear: v_vbeln.
*        CALL TRANSACTION 'VL01N'.
*      ENDIF.
      ENDIF.
  ENDCASE.


ENDFORM.

""""""""""""""""""""""""""""""""""""""""""""""""""""""

*FORM event1 .
*
*  REFRESH lt_event1.
*
*  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
**  EXPORTING
**    I_LIST_TYPE           = 0
*   IMPORTING
*     et_events             = lt_event1
*   EXCEPTIONS
*     list_type_wrong       = 1
*     OTHERS                = 2.
*
*  IF lt_event1 IS NOT INITIAL.
*    CLEAR ls_event1.
*    READ TABLE lt_event1 INTO ls_event1
*    WITH KEY name = 'UCOMM'.
*
*    IF sy-subrc = 0.
*      ls_event1-form = 'UCOMM'.
*      MODIFY lt_event1 FROM ls_event1
*      INDEX sy-tabix TRANSPORTING form.
*    ENDIF.
*
*    CLEAR ls_event1.
*    READ TABLE lt_event1 INTO ls_event1
*    WITH KEY name = 'TOP_OF_PAGE'.
*
*    IF sy-subrc = 0.
*      ls_event1-form = 'TOP1'.
*      MODIFY lt_event1 FROM ls_event1
*      INDEX sy-tabix TRANSPORTING form.
*    ENDIF.
*  ENDIF.
*
*ENDFORM.                    " EVENT_EKKO
*
*FORM top1.
*
*  CLEAR ls_top1.
*  REFRESH lt_top1.
*
*  ls_top1-typ = 'H'.
*  ls_top1-info = 'Purchase Order Item wise Display'.
*  APPEND ls_top1 TO lt_top1.
*  CLEAR ls_top1.
*
*  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
*    EXPORTING
*      it_list_commentary       = lt_top1
**   I_LOGO                   =
**   I_END_OF_LIST_GRID       =
**   I_ALV_FORM               =
*            .
*
*ENDFORM.
*








""""""""""""""""""""""""""""""""""""""""""""""""""""""